<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Computability theory on Hugo Cisneros</title><link>https://hugocisneros.com/tags/computability-theory/</link><description>Recent content in Computability theory on Hugo Cisneros</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 May 2022 10:46:00 +0200</lastBuildDate><atom:link href="https://hugocisneros.com/tags/computability-theory/index.xml" rel="self" type="application/rss+xml"/><item><title>Turing-completeness</title><link>https://hugocisneros.com/notes/turing_completeness/</link><pubDate>Tue, 03 May 2022 10:46:00 +0200</pubDate><guid>https://hugocisneros.com/notes/turing_completeness/</guid><description>tags Computability theory, Computer science A system is Turing complete if it can be used to simulate any Turing Machine.
Examples of Turing complete systems Some cellular automata Most Programming languages Lambda calculus Combinatory logic Others like Post-Turing Machines, formal grammar, formal language, etc. Some games (Minecraft, baba is you) and computational languages (markup languages like HTML+CSS) Other suprisingly turing complete systems that show that after a certain level of complexity it becomes possible to &amp;ldquo;stumble upon&amp;rdquo; turing completeness.</description></item><item><title>Church-Turing thesis</title><link>https://hugocisneros.com/notes/church_turing_thesis/</link><pubDate>Sun, 16 May 2021 14:56:00 +0200</pubDate><guid>https://hugocisneros.com/notes/church_turing_thesis/</guid><description>tags Computability theory A function on the natural numbers can be computed effectively if and only if it can be computed by a Turing Machine (or any equivalent computational model).
Implications for Zuse&amp;rsquo;s thesis An interesting implication of the Church-Turing thesis is any Turing-complete computational model could in theory be &amp;ldquo;computing&amp;rdquo; our Universe. However, the constant overhead of running this algorithm is very different from one model to another. There must be an optimal or close to optimal computational model for simulating life processes and it seems from everyday observation that it should be inherently parallel.</description></item><item><title>Kolmogorov complexity</title><link>https://hugocisneros.com/notes/kolmogorov_complexity/</link><pubDate>Thu, 25 Mar 2021 09:58:00 +0100</pubDate><guid>https://hugocisneros.com/notes/kolmogorov_complexity/</guid><description>tags Complexity, Algorithmic Information theory, Computability theory Definition Invariance theorem For two descriptive languages \(L_1\) and \(L_2\) and their respective associated Kolmogorov complexity functions \(K_1\) and \(K_2\), there exist a constant \(c\) &amp;mdash; dependant only on \(L_1, L_2\) such that \[ \forall s, -c \leq K_1(s) - K_2(s) \leq c \]
In other words, there is always a bounded difference between the Kolmogorov complexity in two separate description languages.</description></item><item><title>Turing degree</title><link>https://hugocisneros.com/notes/turing_degree/</link><pubDate>Thu, 25 Mar 2021 09:58:00 +0100</pubDate><guid>https://hugocisneros.com/notes/turing_degree/</guid><description>tags Computability theory The idea behind Turing degrees is similar to the notion of cardinality of infinite sets ($ℵ_0, ℵ_1, &amp;hellip;$) in the world of computation.
A Turing degree is an equivalence class for the Turing equivalence. Being Turing equivalent for two sets \(X\) and \(Y\) means that a Turing machine can decide if an element belongs to the set \(X\) when it has an oracle for membership to \(Y\) (there is a way to formulate the membership problem for \(X\) as a problem for \(Y\)) and reciprocally.</description></item><item><title>Halting probability</title><link>https://hugocisneros.com/notes/halting_probability/</link><pubDate>Thu, 25 Mar 2021 09:56:00 +0100</pubDate><guid>https://hugocisneros.com/notes/halting_probability/</guid><description> tags Computability theory, Algorithmic Information theory, Halting problem</description></item><item><title>Halting problem</title><link>https://hugocisneros.com/notes/halting_problem/</link><pubDate>Tue, 14 Jul 2020 08:27:00 +0200</pubDate><guid>https://hugocisneros.com/notes/halting_problem/</guid><description> tags Computability theory</description></item></channel></rss>