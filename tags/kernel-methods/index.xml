<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel Methods on Hugo Cisneros</title><link>https://hugocisneros.com/tags/kernel-methods/</link><description>Recent content in Kernel Methods on Hugo Cisneros</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 30 Aug 2021 22:02:00 +0200</lastBuildDate><atom:link href="https://hugocisneros.com/tags/kernel-methods/index.xml" rel="self" type="application/rss+xml"/><item><title>Notes on: Reservoir Computing meets Recurrent Kernels and Structured Transforms by Dong, J., Ohana, R., Rafayelyan, M., &amp; Krzakala, F. (2020)</title><link>https://hugocisneros.com/notes/dongreservoircomputingmeets2020/</link><pubDate>Mon, 30 Aug 2021 22:02:00 +0200</pubDate><guid>https://hugocisneros.com/notes/dongreservoircomputingmeets2020/</guid><description>source (Dong et al. 2020) tags Reservoir computing, Kernel Methods Summary This paper presents a connection between large size reservoir computing and kernel methods.
The authors formulate a reservoir computing model as a form of recurrent kernel iteration. If the reservoir update is written \[ x^{(t+1)} = \dfrac{1}{\sqrt{N}} f \left(W_r x^{(t)} + W_i i^{(t)} \right) \] with \(x^{(t)}\) the state of the reservoir at time \(t\) and \(i^{(t)}\) sequential input at time \(t\), \(W_r \in \mathbb{R}^{N\times N}\) and \(W_i \in \mathbb{R}^{N\times d}\), we may re-frame it as a random feature embedding of the vector \(\left[ x^{(t)} , i^{(t)} \right]\) with the matrix \(W = [W_r, W_i]\).</description></item><item><title>Kernel Machine</title><link>https://hugocisneros.com/notes/kernel_machine/</link><pubDate>Fri, 05 Feb 2021 13:48:00 +0100</pubDate><guid>https://hugocisneros.com/notes/kernel_machine/</guid><description> tags Kernel Methods</description></item></channel></rss>